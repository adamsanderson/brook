:root {
  --color-active:   #617cba;
  --color-danger:   #dc3545;
  --color-success:  #28a745;
  --color-text:     #66666e;
  --color-dark:     #33333c;
  --color-grey:     #99999a;
  --color-light:    #ccccce;
  --color-lightest: #eeeeef;
  --color-white:    #ffffff;

  --weight-bold: 600;
  --weight-black: 700;

  --speed-fast: 250ms;
  --speed-medium: 500ms;
  --speed-slow: 1000ms;
  --speed-very-slow: 2000ms;
}

* {
  box-sizing: border-box;
}

html, body {
  height: 100%;

  margin: 0;
  padding: 0;
}

body {
  padding: 0;
  color: var(--color-text);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body.Options, body.Import {
  height: auto;
  padding: 1em 0.5em;
}

body.Import {
  max-width: 40em;
  margin: 1em auto;
}

/* Normalize margins on block elements */
h1, h2, h3, h4, h5, h6,
p, ul, ol, table {
  margin: 0 0 1em 0;
}

ul, ol {
  padding: 0;
  padding-left: 1em;
}

hr {
  height: 1px;
  border: 0 solid var(--color-lightest);
  border-top-width: 1px;
  padding: 0;
  margin: 0.5em 0;
}

a {
  text-decoration: none;
}

a[href] {
  cursor: pointer;
}

a[href]:hover {
  text-decoration: underline;
}

.Root-popup {
  /* 
    We do not want the popup to resize, so the following dimensions ensure a consistent layout:
    https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Popups
  */
  height: 600px;
  min-width: 320px;
  max-width: 400px;
}

.Root-sidebar {

}

.Panel {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.Panel-header {
  font-weight: var(--weight-black);
  padding: 0.5em;
  border-bottom: 1px solid var(--color-lightest);
  color: var(--color-dark);

  display: flex;
  justify-content: flex-start;
  white-space: nowrap;
}

.Panel-footer {
  padding: 0.5em;
  border-top: 1px solid var(--color-lightest);
  color: var(--color-dark);

  display: flex;
  justify-content: flex-start;
  white-space: nowrap;
}

.Panel-header :first-child {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
}

.Panel-header a,
.Panel-header .secondary {
  font-weight: normal;
  color: var(--color-text);
}

.Panel-header .Icon,
.Panel-footer .Icon {
  width: 1.2em;
  height: 1.2em;
}

.Panel-header .Icon:hover,
.Panel-footer .Icon:hover {
  color: var(--color-active);
  cursor: pointer;
}

.Panel-body {
  padding-top: 0.25em;
  overflow-y: auto;
  flex-grow: 1;
}

.Panel-body p {
  padding-left: 0.5em;
  padding-right: 0.5em;
}

.List a {
  color: inherit;
}

.List .List-item {
  position: relative;
  padding: 0.25em 0.2em;
  text-indent: 0.2em; /* All list items get some padding regardless of indent  */
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;

  display: flex;
  align-items: center;
}

.List .List-item :last-child {
  /* Last item in a list should expand to fill */
  flex-grow: 1;
}

.List .List-item .Icon {
  flex-shrink: 0;
}

.List .List-item.isUnread {
  font-weight: var(--weight-bold);
}

.List .List-item.isSelected {
  background: var(--color-lightest);
}

.List .List-item.isHoveringBefore::after,
.List .List-item.isHoveringAfter::after {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--color-active);
  pointer-events: none;
}

.List .List-item.isHoveringBefore::after {
  top: 0;
}

.List .List-item.isHoveringAfter::after {
  bottom: 0;
}

.List .List-item.isHoveringOver {
  background: var(--color-active);
  color: var(--color-lightest);
}

.Feed {
  position: relative;
}

.Feed .Feed-action {
  position: absolute;
  right: 0.25em;
}

.Feed svg.Feed-action {
  fill: var(--color-white);
}

.Feed svg.Feed-action:hover {
  color: var(--color-danger);
}

.Menu {
  position: fixed;
  padding: 0.5em;

  background: var(--color-white);
  box-shadow: 0 0 5px var(--color-light);
}

.Menu a {
  display: inline-block;
  padding: 0.25em;
  color: var(--color-text);
}

.Menu a.isSelected {
  font-weight: var(--weight-bold);
}

.MenuItemRadioButton {
  display: inline-block;
  margin-right: 0.4em;
  margin-top: -0.1em;
  width: 0.5em;
  height: 0.5em;
  border-radius: 100%;
  vertical-align: middle;
  background: currentColor;
  color: transparent;
}

.isSelected > .MenuItemRadioButton {
  color: var(--color-active);
}

:not(.isSelected):hover > .MenuItemRadioButton {
  color: var(--color-light);
}

.Modal {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 0.5em;
}

.Toast {
  position: fixed;
  bottom: 0;
  left: 0;
  padding: 1em 0.5em;
  min-width: 15em;
  max-width: 100%;
  
  display: flex;
  background: var(--color-white);
  box-shadow: 0 0 5px var(--color-light);
}

.Toast-message {
  flex: 1;
  overflow: hidden;
}

.Toast-action {
  padding: 0 0.25em;
  color: var(--color-active);
}

.Toast-close {
  padding: 0 0.25em;
}

.Toast-close:hover {
  text-decoration: none;
}

.Button {
  padding: 0.25em;
  border: 1px solid;
  border-radius: 2px;
  cursor: pointer;
  background: transparent;

  transition: box-shadow ease-out var(--speed-fast);
}

.Button:hover {
  box-shadow: 2px 2px 4px currentColor;
  text-decoration: none;
}

.EmptyState {
  padding: 0.5em;
  color: var(--color-grey);
}

.ErrorState {
  padding: 0.5em 1em;
}

.Form-control {
  padding-bottom: 0.5em;
}

.Form-hint {
  color: var(--color-grey);
  padding-bottom: 0.5em;
}

/* 
  Layout Helpers 
*/
.layout-vertical {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.layout-horizontal {
  display: flex;
  flex-direction: row;
}

/* 
  All children should get a `min-height: 0` to trigger 
  nested layout:
  https://stackoverflow.com/questions/29430254/nested-flexbox-with-scrolling-area
*/
.layout-vertical > * {
  min-height: 0;
}

.layout-flex-1 {
  flex: 1;
}

.layout-flex-2 {
  flex: 2;
}

.layout-flex-3 {
  flex: 3;
}

.layout-hero {
  display: block;
  height: auto;
  margin: auto;
  max-width: 100%;
}

.layout-trailing {
  display: block;
  max-height: 10em;
  margin: 2em auto 0 auto;
  max-width: 100%;
}

.layout-spread {
  display: flex;
  align-items: center;
  justify-content: space-between;

  column-gap: 0.5em;
}

.layout-spread > * {
  text-align: center;
  flex-grow: 1;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.layout-spread > :last-child {
  text-align: right;
}

.layout-spread > :first-child {
  text-align: left;
}

/* Useful for laying out a column oriented form where the fields align along the gap */
.layout-column-aligned {
  display: flex;
}

.layout-column-aligned > * {
  flex: 2;
}

.layout-column-aligned > :first-child {
  flex: 1;
  text-align: right;
  margin-right: 0.25em;
}

.layout-visually-hidden {
  position: fixed;
  right: -100%;
}

/* 
  Style Variants
*/

.inverted {
  background: var(--color-active);
  color: var(--color-white);
}

.inverted > * {
  --color-active: #FFFFFF;
  --color-dark: #FFFFFF;
}

.secondary {
  color: var(--color-light);
}

/*
  Component States / Traits
*/

.isActive {
  color: var(--color-active);
}

.hasError,
.hasError a,
.hasError a:visited {
  color: var(--color-danger);
}

.isWarning
.isWarning a,
.isWarning a:visited {
  color: var(--color-danger);
}

.hasError a,
.isWarning a {
  text-decoration: underline;
}

.inverted .hasError {
  color: #ffbfca;
}

.isActionable:hover {
  color: var(--color-active);
  cursor: pointer;
}

/* 
  Icons 
*/
.Icon {
  display: inline-block;
  width: 1em;
  height: 1em;

  vertical-align: middle;
  margin-top: -0.125em;   /* Adjusts vertical alignment */
  margin-right: 0.1em;    /* Adds some space when used inline */
}

.Icon.StatusIndicator {
  transition: fill ease-out var(--speed-medium);
  transition: transform ease-out var(--speed-fast);
  will-change: transform, fill;
}
.Icon.StatusIndicator.isRead { 
  fill: var(--color-light); 
}
.Icon.StatusIndicator.isUnread { 
  fill: var(--color-active); 
}
.Icon.StatusIndicator.hasError { 
  fill: var(--color-danger); 
}
.Icon.StatusIndicator.isLoading {
  animation: pulse var(--speed-fast) infinite alternate-reverse;
}

.Icon.Folder {
  fill: var(--color-dark);
  transition: transform ease-out var(--speed-fast);
  transform-origin: 50% 50%;
}
.Icon.Folder.isExpanded {  transform: rotate(90deg); }
.Icon.Folder.isCollapsed { transform: rotate(0deg);  }

.Icon.isSpinning {
  animation: spin var(--speed-slow) infinite linear;
}

/* 
  Animations 
*/

@keyframes pulse {
  0% {
    transform: scale(1)
  }
  70% {
    transform: scale(1.4)
  }
  100% {
    transform: scale(1.6)
  }
}

@keyframes spin {
  0% {
    transform: rotate(0)
  }
  100% {
    transform: rotate(360deg)
  }
}

/* 
  Transitions 
*/

/* Full Page Modals */
.Modal-enter.FullPageLayout, .Modal-exit.Modal-exit-active.FullPageLayout {
  opacity: 0.01;
  transform: translateX(-200px);
}

.Modal-exit.FullPageLayout, .Modal-enter.Modal-enter-active.FullPageLayout {
  opacity: 1;
  transform: translateX(0);
}

.Modal-enter.Modal-enter-active.FullPageLayout{
  transition: opacity 150ms ease-in,
              transform 200ms ease-in;
}

.Modal-exit.Modal-exit-active.FullPageLayout{
  transition: opacity 100ms ease-in, 
              transform 150ms ease-in;
}

/* Popup Modals */
.Modal-enter.PopupLayout, .Modal-exit.Modal-exit-active.PopupLayout {
  opacity: 0.01;
  transform: translateY(-10px);
}

.Modal-exit.PopupLayout, .Modal-enter.Modal-enter-active.PopupLayout {
  opacity: 1;
  transform: translateY(0);
}

.Modal-enter.Modal-enter-active.PopupLayout{
  transition: opacity 100ms ease-in,
              transform 50ms ease-in;
}

.Modal-exit.Modal-exit-active.PopupLayout{
  transition: opacity 100ms ease-in, 
              transform 50ms ease-in;
}

/* Toast Modals */
.Modal-enter.Toast, .Modal-exit.Modal-exit-active.Toast {
  opacity: 0.01;
  transform: translateY(20px);
}

.Modal-exit.Toast, .Modal-enter.Modal-enter-active.Toast {
  opacity: 1;
  transform: translateY(0);
}

.Modal-enter.Modal-enter-active.Toast{
  transition: opacity 200ms ease-in,
              transform 200ms ease-in;
}

.Modal-exit.Modal-exit-active.Toast{
  transition: opacity 100ms ease-in, 
              transform 150ms ease-in;
}

