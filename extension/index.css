:root {
  --color-active:   #007bff;
  --color-danger:   #dc3545;
  --color-success:  #28a745;
  --color-text:     #66666e;
  --color-dark:     #33333c;
  --color-grey:     #99999a;
  --color-light:    #ccccce;
  --color-lightest: #eeeeef;
  --color-white:    #ffffff;

  --weight-bold: 600;
  --weight-black: 700;

  --speed-fast: 250ms;
  --speed-medium: 500ms;
}

* {
  box-sizing: border-box;
}

html, body {
  height: 100%;

  margin: 0;
  padding: 0;
}

body {
  padding: 0;
  color: var(--color-text);
}

/* Normalize margins on block elements */
h1, h2, h3, h4, h5, h6,
p, ul, ol, table {
  margin: 0 0 1em 0;
}

ul, ol {
  padding: 0;
  padding-left: 1em;
}

a {
  cursor: pointer;
}

.Panel-header {
  font-weight: var(--weight-black);
  padding: 0.5em;
  border-bottom: 1px solid var(--color-lightest);
  color: var(--color-dark);

  display: flex;
  justify-content: flex-start;
}

.Panel-header :first-child {
  flex: 1;
}

.Panel-header .Icon {
  width: 1.2em;
  height: 1.2em;
}

.Panel-header .Icon:hover {
  color: var(--color-active);
  cursor: pointer;
}

.Panel-body {
  overflow-y: auto;
}

.Panel-body p {
  padding-left: 0.5em;
  padding-right: 0.5em;
}

.List a {
  text-decoration: none;
  color: inherit;
}

.List a:hover {
  text-decoration: underline;
}

.List .List-item {
  position: relative;
  padding: 0.25em 0.2em;
  text-indent: 0.2em; /* All list items get some padding regardless of indent  */
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.List .List-item.isUnread {
  font-weight: var(--weight-bold);
}

.List .List-item.isSelected {
  background: var(--color-lightest);
}

.List .List-item.isHoveringBefore::after,
.List .List-item.isHoveringAfter::after {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--color-active);
  pointer-events: none;
}

.List .List-item.isHoveringBefore::after {
  top: 0;
}

.List .List-item.isHoveringAfter::after {
  bottom: 0;
}

.List .List-item.isHoveringOver {
  background: var(--color-active);
  color: var(--color-lightest);
}

.Menu {
  position: fixed;
  background: var(--color-white);
  padding: 1em;
  
  box-shadow: 0 0 5px var(--color-light);
}

.Modal {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 0.5em;
}

/* 
  Layout Helpers 
*/
.layout-vertical {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: stretch;
  align-content: stretch;
}

.layout-1of3 {
  flex: 1;
}

.layout-2of3 {
  flex: 2;
}

.layout-fill {
  box-sizing: border-box;
  width: 100%;
}

/* 
  Style Variants
*/

.inverted {
  background: var(--color-active);
  color: var(--color-white);
}

.inverted .Panel-header {
  color: var(--color-white);
}

/*
  Component States
*/

.isActive {
  color: var(--color-active);
}

.hasError {
  color: var(--color-danger);
}

.inverted .hasError {
  color: #ffbfca;
}

/* 
  Icons 
*/
.Icon {
  display: inline-block;
  width: 1em;
  height: 1em;

  vertical-align: middle;
  margin-top: -0.125em;   /* Adjusts vertical alignment */
  margin-right: 0.1em;    /* Adds some space when used inline */
}

.Icon.StatusIndicator {
  transition: fill ease-out var(--speed-medium);
  transition: transform ease-out var(--speed-fast);
}
.Icon.StatusIndicator.isRead { 
  fill: var(--color-light); 
}
.Icon.StatusIndicator.isUnread { 
  fill: var(--color-active); 
}
.Icon.StatusIndicator.hasError { 
  fill: var(--color-danger); 
}
.Icon.StatusIndicator.isLoading {
  animation: pulse var(--speed-fast) infinite alternate-reverse;
}

.Icon.Folder {
  fill: var(--color-dark);
  transition: transform ease-out var(--speed-fast);
  transform-origin: 50% 50%;
}
.Icon.Folder.isExpanded {  transform: rotate(90deg); }
.Icon.Folder.isCollapsed { transform: rotate(0deg);  }

/* 
  Animations 
*/

@keyframes pulse {
  0% {
    transform: scale(1)
  }
  70% {
    transform: scale(1.4)
  }
  100% {
    transform: scale(1.6)
  }
}

/* 
  Transitions 
*/

/* Full Page Modals */
.Modal-enter.FullPageLayout, .Modal-exit.Modal-exit-active.FullPageLayout {
  opacity: 0.01;
  transform: translateX(-200px);
}

.Modal-exit.FullPageLayout, .Modal-enter.Modal-enter-active.FullPageLayout {
  opacity: 1;
  transform: translateX(0);
}

.Modal-enter.Modal-enter-active.FullPageLayout{
  transition: opacity 150ms ease-in,
              transform 200ms ease-in;
}

.Modal-exit.Modal-exit-active.FullPageLayout{
  transition: opacity 100ms ease-in, 
              transform 150ms ease-in;
}

/* Popup Modals */
.Modal-enter.PopupLayout, .Modal-exit.Modal-exit-active.PopupLayout {
  opacity: 0.01;
  transform: translateY(-10px);
}

.Modal-exit.PopupLayout, .Modal-enter.Modal-enter-active.PopupLayout {
  opacity: 1;
  transform: translateY(0);
}

.Modal-enter.Modal-enter-active.PopupLayout{
  transition: opacity 100ms ease-in,
              transform 50ms ease-in;
}

.Modal-exit.Modal-exit-active.PopupLayout{
  transition: opacity 100ms ease-in, 
              transform 50ms ease-in;
}

